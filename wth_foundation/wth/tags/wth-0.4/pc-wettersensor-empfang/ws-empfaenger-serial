wine started WS_Empfaenger, but crashed
---------------------------------------
stty -F /dev/ttyS0 -a
speed 19200 baud; rows 0; columns 0; line = 0;
intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = <undef>;
eol2 = <undef>; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W;
lnext = ^V; flush = ^O; min = 0; time = 1;
parenb parodd cs8 -hupcl cstopb cread clocal -crtscts
ignbrk -brkint -ignpar -parmrk inpck -istrip -inlcr -igncr -icrnl -ixon -ixoff
-iuclc -ixany -imaxbel
-opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0
ff0
-isig -icanon iexten -echo echoe echok -echonl noflsh -xcase -tostop -echoprt
echoctl echoke

this how it worked once
-----------------------
stty -F /dev/ttyS0 speed 19200 parenb parodd cstopb
stty -F /dev/ttyS0 ignbrk inpck -icrnl -ixon -opost -isig -icanon iexten -echo echoe echok -echonl noflsh -xcase -tostop -echoprt



settings after bootup
---------------------
stty -F /dev/ttyS0 -a
speed 9600 baud; rows 0; columns 0; line = 0;
intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = <undef>;
eol2 = <undef>; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W;
lnext = ^V; flush = ^O; min = 1; time = 0;
-parenb -parodd cs8 hupcl -cstopb cread clocal -crtscts
-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff
-iuclc -ixany -imaxbel
opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0
isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt
echoctl echoke


setting only c-flags and i-flags seems to be sufficient
-------------------------------------------------------
stty -F /dev/ttyS0 speed 19200 parenb parodd cstopb
stty -F /dev/ttyS0 -isig -icanon 


these settings work
-------------------
stty -F /dev/ttyS0 -a
speed 19200 baud; rows 0; columns 0; line = 0;
intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = <undef>; eol2 = <undef>; start = ^Q;
stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; flush = ^O; min = 1; time = 0;
parenb parodd cs8 hupcl cstopb cread clocal -crtscts
-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff -iuclc -ixany -imaxbel
opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0
-isig -icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke


data reading on the serial line configured as above will return only
5 Byte long strings instead of the specified 8 bytes. This happens
when using
	select
	blocking I/O
	simple cat </dev/ttyS0 >outf (if you look at the length of outf 
		it is 5 bytes long after the first read, 10 bytes after the 
		second and so on).




the following setup of /dev/ttyd0 and /dev/ttyd1 for serial line snooping
w/ snooper gets data off the weather sensor receiver:

/dev/ttyd0
----------
speed 9600 baud; 0 rows; 0 columns;
lflags: -icanon -isig -iexten -echo -echoe -echok -echoke -echonl
        -echoctl -echoprt -altwerase -noflsh -tostop -flusho -pendin
        -nokerninfo -extproc
iflags: -istrip -icrnl -inlcr -igncr -ixon -ixoff -ixany -imaxbel -ignbrk
        -brkint -inpck -ignpar -parmrk
oflags: -opost -onlcr -ocrnl -oxtabs -onocr -onlret
cflags: cread cs8 parenb -parodd -hupcl clocal cstopb -crtscts -dsrflow
        -dtrflow -mdmbuf
cchars: discard = ^@; dsusp = ^@; eof = ^@; eol = ^@; eol2 = ^@;
        erase = ^@; erase2 = ^@; intr = ^@; kill = ^@; lnext = ^@;
        min = 0; quit = ^@; reprint = ^@; start = ^@; status = ^@;
        stop = ^@; susp = ^@; time = 10; werase = ^@;

/dev/ttyd1
----------
speed 19200 baud; 0 rows; 0 columns;
lflags: -icanon -isig -iexten -echo -echoe -echok -echoke -echonl
        -echoctl -echoprt -altwerase -noflsh -tostop -flusho -pendin
        -nokerninfo -extproc
iflags: -istrip -icrnl -inlcr -igncr -ixon -ixoff -ixany -imaxbel -ignbrk
        -brkint -inpck -ignpar -parmrk
oflags: -opost -onlcr -ocrnl -oxtabs -onocr -onlret
cflags: cread cs8 parenb parodd -hupcl clocal cstopb -crtscts -dsrflow
        -dtrflow -mdmbuf
cchars: discard = ^O; dsusp = ^Y; eof = ^D; eol = <undef>;
        eol2 = <undef>; erase = ^?; erase2 = ^H; intr = ^C; kill = ^U;
        lnext = ^V; min = 1; quit = ^\; reprint = ^R; start = ^Q;
        status = ^T; stop = ^S; susp = ^Z; time = 5; werase = ^W;

to use the serial line snooper
/usr/local/bin/snooper -b19200 /dev/ttyd0 /dev/ttyd1

to configure the serial lines, simple reset them to their bootup default
then use stty to set 2 stop bits and parity:
stty -f /dev/ttyd[01-] cstopb
stty -f /dev/ttyd[01-] parenb
stty -f /dev/ttyd[01-] parodd

