head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2001.02.06.15.57.08;	author volker;	state Exp;
branches;
next	;


desc
@FreeBSD OK
@


1.1
log
@Initial revision
@
text
@#include	<sys/types.h>	/* basic system data types */
#include	<sys/socket.h>	/* basic socket definitions */
#include	<sys/time.h>	/* timeval{} for select() */
#include	<time.h>		/* timespec{} for pselect() */
#include	<netinet/in.h>	/* sockaddr_in{} and other Internet defns */
#include	<arpa/inet.h>	/* inet(3) functions */
#include	<errno.h>
#include	<fcntl.h>		/* for nonblocking */
#include	<netdb.h>
#include	<signal.h>
#include	<stdio.h>
#include	<stdlib.h>
#include	<string.h>
#include	<sys/stat.h>	/* for S_xxx file mode constants */
#include	<sys/uio.h>		/* for iovec{} and readv/writev */
#include	<unistd.h>
#include	<sys/wait.h>
#include	<sys/un.h>		/* for Unix domain sockets */

# include	<sys/select.h>	/* for convenience */
# include	<poll.h>		/* for convenience */
# include	<strings.h>		/* for convenience */

# include	<sys/ioctl.h>
# include	<pthread.h>

#define	MAXLINE		4096	/* max text line length */
#define	MAXSOCKADDR  128	/* max socket address structure size */
#define	BUFFSIZE	8192	/* buffer size for reads and writes */

/* Define some port number that can be used for client-servers */
#define	SERV_PORT		 9877			/* TCP and UDP client-servers */
#define	SERV_PORT_STR	"9877"			/* TCP and UDP client-servers */
#define	UNIXSTR_PATH	"/tmp/unix.str"	/* Unix domain stream cli-serv */
#define	UNIXDG_PATH	"/tmp/unix.dg"	/* Unix domain datagram cli-serv */
#define LISTENQ         1024            /* 2nd argument to listen() */

/* Following shortens all the type casts of pointer arguments */
#define	SA	struct sockaddr

#define	FILE_MODE	(S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)
					/* default file access permissions for new files */
#define	DIR_MODE	(FILE_MODE | S_IXUSR | S_IXGRP | S_IXOTH)
					/* default permissions for new directories */


#define	min(a,b)	((a) < (b) ? (a) : (b))
#define	max(a,b)	((a) > (b) ? (a) : (b))


int      Socket(int, int, int); 
ssize_t  Read(int, void *, size_t); 
void     Write(int, void *, size_t);   
void     Bind(int, const SA *, socklen_t);
void     Listen(int, int); 
void     Close(int); 
void     daemon_init(const char *, int); 

pid_t    Fork(void); 
void     Setsockopt(int, int, int, const void *, socklen_t); 
void     Writen(int, void *, size_t);  
ssize_t  Readline(int, void *, size_t);  


void     err_dump(const char *, ...);
void     err_msg(const char *, ...);
void     err_quit(const char *, ...);
void     err_ret(const char *, ...);
void     err_sys(const char *, ...);




@
