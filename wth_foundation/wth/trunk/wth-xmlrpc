#!/usr/bin/perl -w
#
# XML RPC client for weatherstation demonstartion purposes
# based on rpc-client.pl, Copyright (C) 1998 Ken MacLeod
#
# Copyright (C) 2001 Volker Jahns
# See the file COPYING for distribution terms.
#
# $Id: wth-xmlrpc,v 1.1 2002/01/07 12:39:11 jahns Exp jahns $
#

use Frontier::Client;
use Getopt::Long;
use Time::Local;

my $debug = 1;
my $encoding = undef;
my $proxy = undef;

my %DCF = (0, 'not synchronized', 1, 'synchronized');

sub decode_base64 ($)
{
    local($^W) = 0; # unpack("u",...) gives bogus warning in 5.00[123]

    my $str = shift;
    my $res = "";

    $str =~ tr|A-Za-z0-9+=/||cd;            # remove non-base64 chars
    if (length($str) % 4) {
        require Carp;
        Carp::carp("Length of base64 data not a multiple of 4")
    }
    $str =~ s/=+$//;                        # remove padding
    $str =~ tr|A-Za-z0-9+/| -_|;            # convert to uuencoded form    

    while ($str =~ /(.{1,60})/gs) {
        my $len = chr(32 + length($1)*3/4); # compute length byte
        $res .= unpack("u", $len . $1 );    # uudecode
    }
    $res;
}


GetOptions( 'debug' => \$debug,
            'encoding=s' => \$encoding,
            'proxy=s' => \$proxy );

die "usage: wth-xmlrpc URL METHOD [\"ARGLIST\"]\n"
    if ($#ARGV != 1 && $#ARGV != 2);

my $url = shift @ARGV;
my $method = shift @ARGV;
my $arglist = shift @ARGV;

$server = Frontier::Client->new( 'url' => $url,
                                 'debug' => $debug,
                                 'encoding' => $encoding,
                                 'proxy' => $proxy );

my @arglist;
#eval "\@arglist = ($arglist)";

$result = $server->call($method, @arglist);

# base64 return data must be decoded
$base64data = $result->{'data'}->value;
$data = decode_base64($result->{'data'}->value);

# demasquerade data
my @cdata;
for ( $i = 0; $i < length $data; $i++) {
	$dat = vec $data, $i, 8;
        if ( $dat == 5 ) {
	    $dat = vec $data, $i+1, 8;
            if ( $dat == 18 ) {
		$dat = 2;
	    }
	    elsif ( $dat == 19 ) {
		$dat = 3;
	    }
	    elsif ( $dat == 21 ) {
		$dat = 5;
	    }

	    $i = $i + 1;
	}
	push @cdata, $dat;
}


if ( $debug) {
    print "---------------------\n";
    print "---- result dump ----\n";
    require 'dumpvar.pl';
    dumpvar ('main', 'result');
    printf "---- received base64 encoded string ----\n\"$base64data\"\n";
    printf "---- length of data string: %d\n",length $data;
    printf "---- data     : ";
    for ( $i = 0; $i < length $data; $i++) {
	$dat = vec $data, $i, 8;
	printf "%d:", $dat;
    }
    printf "\n";
    print "---- corr.data: @cdata\n";
    print "---------------------\n";
}


if ( $method eq "poll.DCFTime" ) {
    #$weekday = $cdata[2] & 15;
    $dcfok   = ($cdata[2] >> 4 ) & 1;
    print "DCF: $DCF{$dcfok}\n";
	
    $one     = $cdata[3] & 15;
    $ten     = ( $cdata[3] >> 4 ) & 15;
    $hr      = 10 * $ten + $one;

    $one      = $cdata[4] & 15;
    $ten     = ( $cdata[4] >> 4 ) & 15;
    $min      = 10 * $ten + $one;

    $sec      = $cdata[5];

    $one      = $cdata[6] & 15;
    $ten     = ( $cdata[6] >> 4 ) & 15;
    $day      = 10 * $ten + $one;

    $one      = $cdata[7] & 15;
    $ten     = ( $cdata[7] >> 4 ) & 15;
    $mon      = 10 * $ten + $one;

    $one      = $cdata[8] & 15;
    $ten     = ( $cdata[8] >> 4 ) & 15;
    $yr      = 2000 + 10 * $ten + $one;

    $time = timelocal($sec, $min, $hr, $day, $mon-1, $yr - 1900 );
    print "Localtime: ", scalar(localtime($time)), "\n"; 
}






