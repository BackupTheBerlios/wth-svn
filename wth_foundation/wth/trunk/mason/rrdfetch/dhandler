<%doc>

  rrdfetch Mason component

  dhandler, called via http://<hostname>/rrdfetch/?rrd=<sensor>  

  rrdtool: http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/
  mason:   http://www.masonhq.com

</%doc>

<%flags>
    inherit => undef
</%flags>

<& RRDFetch, %ARGS &>


<%def RRDFetch>

<%args>
     $rrd   => undef;
     $ds    => undef;
     $time  => undef;
</%args>

<%init>
    use RRDs;

    my $ERROR;
    my $rrdok     = 0;
    my $sensor    = "";
    my $errortext = "";

    my $logfile = "/tmp/rrdfetch.log";
    my $logtime;
    my $rrdval;

    my %fetchopts;
    my %extraopts;
    my @fetchstr;
    my $line;
    my $lasttim;
    my $lastval;
    my $dsname;
    my @retlist;


    $m->clear_buffer;
    print "logfile: $logfile\n";

    open(DFH,"$logfile");
    $logtime = localtime;
    # check if $rrd is a valid datasource
    print DFH "$logtime RRDGet starting execution\n";
    foreach $sensor ( keys %fetchopts ) {
        if ( $rrd eq $sensor ) {
	    print DFH  "$logtime sensor valid: $sensor\n";
            $rrdok = 1;
        }
    }

    if ( $rrdok) {
       print DFH "$logtime $rrd: rrdfile : \"$fetchopts{$rrd}->{rrdfile}\"\n";

       @fetchstr = ();
       push ( @fetchstr, $extraopts{$rrd}->{rrdfile} );
       foreach my $fopt ( keys %{ $fetchopts{$rrd}} ) {
            push ( @fetchstr, $fopt);
            push ( @fetchstr, $fetchopts{$rrd}{$fopt});
       }

       print DFH "$logtime fetchstr: @fetchstr\n";
       my ($start,$step,$names,$array) = 
           RRDs::fetch @fetchstr;

       $ERROR = RRDs::error;
       print DFH "$logtime ERROR: $ERROR\n" if $ERROR ;

       foreach $rrdval (@$names) {
         $dsname = $rrdval if ($rrdval ne "");
       }

       #
       # get last entry in rrd and store to $lastval
       #
       foreach $line (@$array){
         foreach $rrdval (@$line) {
           if ($rrdval ne "") {
             $lasttim = $start;
             $lastval = $rrdval;
             push (@retlist, $start);
             push (@retlist, $rrdval);
           }
         }
         $start += $step;
       }

       #
       # no data found 
       # 
       if ( $lastval eq "") {
         $lasttim= $start;
         $lastval = "NA";
         push(@retlist, $lasttim);
         push(@retlist, $lastval);
       }

       push(@retlist, $dsname);
       printf DFH "$logtime $rrd: rrdfetch result \"@retlist\"\n";
    } else {
        printf DFH "$logtime Can't find sensor : \"$rrd\"!\n";
        $rrdval = "NA";
        push(@retlist, $rrdval);
    }

    if (!$time) {
        print "$lastval";
    } else {
        print scalar localtime($lasttim);
    }
    #return wantarray ? @retlist : $retlist[0];
</%init>

</%def>


<%def GetWindDir>


<%args>
   $wdir => undef;
</%args>


<%init>
     my $wdirsym;
     my @retlist;

     $m->clear_buffer;
     if ( ((348.75 <= $wdir) && ( $wdir < 360 )) || 
          ((0 <= $wdir ) && ($wdir < 11.25)) ) {
         $wdirsym = "N";
     }
     elsif ( ( 11.25 <= $wdir) && ( $wdir < 33.75 ) )  {
         $wdirsym = "NNE";
     }
     elsif ( ( 33.75 <= $wdir) && ( $wdir < 56.25 ) )  {
         $wdirsym = "NE";
     }
     elsif ( ( 56.25 <= $wdir) && ( $wdir < 78.75 ) )  {
         $wdirsym = "ENE";
     }
     elsif ( ( 78.75 <= $wdir) && ( $wdir < 101.25 ) )  {
         $wdirsym = "E";
     }
     elsif ( ( 101.25 <= $wdir) && ( $wdir < 123.75 ) )  {
         $wdirsym = "ESE";
     }
     elsif ( ( 123.75 <= $wdir) && ( $wdir < 146.25 ) )  {
         $wdirsym = "SE";
     }
     elsif ( ( 146.25 <= $wdir) && ( $wdir < 168.75 ) )  {
         $wdirsym = "SSE";
     }
     elsif ( ( 168.75 <= $wdir) && ( $wdir < 191.25 ) )  {
         $wdirsym = "S";
     }
     elsif ( ( 191.25 <= $wdir) && ( $wdir < 213.75 ) )  {
         $wdirsym = "SSW";
     }
     elsif ( ( 213.75 <= $wdir) && ( $wdir < 236.25 ) )  {
         $wdirsym = "SW";
     }
     elsif ( ( 236.25 <= $wdir) && ( $wdir < 258.75 ) )  {
         $wdirsym = "WSW";
     }
     elsif ( ( 258.75 <= $wdir) && ( $wdir < 281.25 ) )  {
         $wdirsym = "W";
     }
     elsif ( ( 281.25 <= $wdir) && ( $wdir < 303.75 ) )  {
         $wdirsym = "WNW";
     }
     elsif ( ( 303.75 <= $wdir) && ( $wdir < 326.25 ) )  {
         $wdirsym = "NW";
     }
     elsif ( ( 326.25 <= $wdir) && ( $wdir < 348.75 ) )  {
         $wdirsym = "NNW";
     }
     else {
         $wdirsym = "NNN";
     }
     
     push(@retlist, $wdirsym);
     return wantarray ? @retlist : $retlist[0];
</%init>

</%def>
