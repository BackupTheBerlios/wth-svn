<%doc>

  rrdfetch Mason component

  dhandler, called via http://<hostname>/rrdfetch/?rrd=<sensor>  

  rrdtool: http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/
  mason:   http://www.masonhq.com

</%doc>

<%flags>
    inherit => undef
</%flags>

<%args>
     $rrd
     $start => undef
</%args>

<%filter>
s/^\n//g;
</%filter>

<%init>
    use RRDs;
    use Data::Dumper;

    my $ERROR;
    my $rrdok     = 0;
    my $sensor    = "";
    my $errortext = "";

    my $logfile = ">>/tmp/rrdfetch.log";
    my $logtime;
    my $rrdval;


    #%fetchopts;

    my $lasttim = $start;
    $lastval = "NA";
    my $dsname;
    my @retlist;
    my $return;

    $m->clear_buffer;
    open(DFH,"$logfile")
      or die "Can't open logfile";
    $logtime = localtime;
    $logtime = $logtime . " RRDFetch:";
   
    # read configfile
    my $configfile = "/tmp/wthrrd.conf";
    unless ( $return = do $configfile)  {
      die "Couldn't parse configfile: $configfile: $@" if $@;
      die "Couldn't do configfile: $configfile: $!"    unless defined $return;
      die "Couldn't run configfile: $configfile"       unless $return;
    } 
    print "testvariable: $testvariable\n";

    # check if $rrd is a valid datasource
    print DFH "$logtime starting execution\n";
    print DFH "$logtime checking available sensors\n";
    foreach $sensor ( keys %fetchopts ) {
        print DFH "RRDFetch: $sensor\n";
        if ( $rrd eq $sensor ) {
	    print DFH  "$logtime sensor valid: $sensor\n";
            $rrdok = 1;
        }
    }

    if ( $rrdok) {
       print DFH "$logtime $rrd: rrdfile : \"$extraopts{$rrd}->{rrdfile}\"\n";

       @fetchstr = ();
       push ( @fetchstr, $extraopts{$rrd}->{rrdfile} );
       foreach my $fopt ( keys %{ $fetchopts{$rrd}} ) {
            push ( @fetchstr, $fopt);
            push ( @fetchstr, $fetchopts{$rrd}{$fopt});
       }
       if ( defined @fetchstr ) {
         print DFH "$logtime fetchstr: ", @fetchstr, "\n"; 
       }
       print "length: $#fetchstr\n";
       my ($start,$step,$names,$array) = 
           RRDs::fetch @fetchstr;

       $ERROR = RRDs::error;
       print DFH "$logtime ERROR: $ERROR\n" if $ERROR ;

       foreach $rrdval (@$names) {
         $dsname = $rrdval if ($rrdval ne "");
       }

       #
       # get last entry in rrd and store to $lastval
       #
       foreach $line (@$array){
         foreach $rrdval (@$line) {
           if ( (defined $rrdval) && ($rrdval ne "")) {
             $lasttim = $start;
             $lastval = $rrdval;
             push (@retlist, $start);
             push (@retlist, $rrdval);
           }
         }
         $start += $step;
       }

       #
       # no data found 
       # 
       if ( $lastval eq "") {
         $lasttim= $start;
         $lastval = "NA";
         push(@retlist, $lasttim);
         push(@retlist, $lastval);
       }

       push(@retlist, $dsname);
       printf DFH "$logtime $rrd: rrdfetch result \"@retlist\"\n";
    } else {
        printf DFH "$logtime Can't find sensor : \"$rrd\"!\n";
        $rrdval = "NA";
        push(@retlist, $rrdval);
    }

    if (!$start) {
        # correction of raw pressure data
        if ( $rrd eq "PressureI" ) {
          $lastval = $lastval + ( $extraopts{$rrd}->{heightNN} / 8.0 );
          print "$lastval";
        } 
        elsif ( $rrd eq "Winddev" ) {
          $lastval = 22.5 * $lastval;
          print "$lastval";
        } 
        else {
          print "$lastval";
        }
    } 
    else {
        print scalar localtime($lasttim);
    }
     return wantarray ? @retlist : $retlist[0];
</%init>
