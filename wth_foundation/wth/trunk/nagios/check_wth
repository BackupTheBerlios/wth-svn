#!/usr/bin/perl
#
###  check_wth
# Nagios plugin to check wth status
#

use strict;
use warnings;
use DBI;
use Time::ParseDate;
use File::Basename;
use Nagios::Plugin;

use vars qw($VERSION $PROGNAME  $verbose $warn $critical $timeout $result);

my %dbfile = (
  'WS2000'  => '/proj/wetter/logs/ws2000_test/ws2000.db',
  'PCWSR'   => '/proj/wetter/logs/pcwsr/pcwsr.db',
  '1WIRE'   => '/proj/wetter/logs/onewire/onewire.db',
  'WMR'     => '/proj/wetter/logs/wmr9x8/wmr9x8.db',
  'UMETER'  => '/proj/wetter/logs/umeter/umeter.db'
);

my %dbname = (
  'WS2000'  => 'ws2000',
  'PCWSR'   => 'pcwsr',
  '1WIRE'   => 'onewire',
  'WMR'     => 'wmr9x8',
  'UMETER'  => 'umeter'
);

my $dbuser = "wthrd";

my $sql = "select distinct last_update from sensorupdate where last_update = ( select max(last_update) from sensorupdate)";
my $sth;
my $currenttime = time();
my ( $lastupdate, $lastupdate_epoch);
my $result;

my @station  = ( 'WS2000', 'PCWSR', '1WIRE', 'WMR', 'UMETER');
my $wstation = "UMETER";
my @dbtype   = ( 'postgresql', 'mysql', 'sqlite');
my $dbtyp    = 'postgresql';

$VERSION = '1.1';
$PROGNAME = basename($0);

my $np = Nagios::Plugin->new(
    usage => "Usage: %s [ -v|--verbose ]  [-H <host>] [-t <timeout>]
    [ -c|--critical=<critical threshold> ] 
    [ -w|--warning=<warning threshold> ]  
    [ -W|--weatherstation = <STRING> ]
    [ -D|--dbtype = <STRING> ]",
    version => $VERSION,
    blurb => 'Nagios plugin to check wth status',
	extra => "

THRESHOLDs for -w and -c are specified 'min:max' or 'min:' or ':max'
(or 'max'). If specified '\@min:max', a warning status will be generated
if the count *is* inside the specified range.

  Examples:

  $PROGNAME -w 10 -c 18 Returns a warning
  if the resulting number is greater than 10,
  or a critical error
  if it is greater than 18.

  $PROGNAME -w 10 : -c 4 : Returns a warning
  if the resulting number is less than 10,
  or a critical error
  if it is less than 4.

  "
);


# usage, help, version, timeout and verbose are defined by default.

$np->add_arg(
	spec => 'warning|w=s',

	help => 
qq{-w, --warning=INTEGER:INTEGER
   Minimum and maximum number of allowable result, outside of which a
   warning will be generated.  If omitted, no warning is generated.},

#	required => 1,
#	default => 10,
);

$np->add_arg(
	spec => 'critical|c=s',
	help => 
qq{-c, --critical=INTEGER:INTEGER
   Minimum and maximum number of the generated result, outside of
   which a critical will be generated. },
);

$np->add_arg(
	spec => 'weatherstation|W=s',
	help => 
qq{-W, --weatherstation=STRING
   Specify the weatherstation on the command line.
   Supported weatherstations are
   - WS2000
   - PCWSR
   - 1WIRE
   - WMR
   - UMETER
   },
);

$np->add_arg(
	spec => 'dbtype|D=s',
	help => 
qq{-D, --dbtype=STRING
   Specify the database type on the command line.
   Supported database type are
   - sqlite
   - postgresql
   - mysql
   },
);

# Parse arguments and process standard ones (e.g. usage, help, version)
$np->getopts;


# perform sanity checking on command line options
# check weatherstation argument
if ( defined $np->opts->weatherstation) {
  $wstation = $np->opts->weatherstation;
  if ( ! grep( /^$wstation$/, @station ) ) {
    $np->nagios_die( " invalid weatherstation value supplied for the -W option " );
  }
}

# check dbtype argument
if ( defined $np->opts->dbtype) {
  $dbtyp = $np->opts->dbtype;
  if ( ! grep( /^$dbtyp$/, @dbtype ) ) {
    $np->nagios_die( " invalid dbtype value supplied for the -D option " );
  }
}

unless ( defined $np->opts->warning || defined $np->opts->critical ) {
	$np->nagios_die( " you didn't supply a threshold argument " );
}

# data in sqlite database
if ( "$dbtyp" eq "sqlite" ) {
  # result - read last_update of windsensor
  if ( ! -r $dbfile{$wstation}) {
    $np->nagios_exit( CRITICAL, "database file not readable");
  }

  my $dbh = DBI->connect("dbi:SQLite:dbname=$dbfile{$wstation}","","", { PrintError => 0});
  if (! defined $dbh) {
    $np->nagios_exit( CRITICAL, "database connection failure");
  }

  $sth = $dbh->prepare( $sql);
  if (! defined $sth) {
    $np->nagios_exit( CRITICAL, "database statement failure");
  }

  $sth->execute();
  ( $lastupdate) = $sth->fetchrow_array();

  $result = int( ( $currenttime - $lastupdate) /3600 + 0.5);
}

# data in postgresql database
if ( "$dbtyp" eq "postgresql" ) {
  my $dbh = DBI->connect("DBI:Pg:dbname=$dbname{$wstation}", 
                         "wthrd",
                         "", 
                         { RaiseError=>0,PrintError => 0});
  if (! defined $dbh) {
    $np->nagios_exit( CRITICAL, "database connection failure - check setup");
  }

  $sth = $dbh->prepare( $sql);
  if (! defined $sth) {
    $np->nagios_exit( CRITICAL, "database statement failure - check setup");
  }

  $sth->execute() or
    $np->nagios_exit( CRITICAL, "database statement failure - check setup");

  ( $lastupdate) = $sth->fetchrow_array();
  $lastupdate_epoch = parsedate( $lastupdate);
  $result = int( ( $currenttime - $lastupdate_epoch) /3600 + 0.5);
}

##############################################################################
# check the result against the defined warning and critical thresholds,
# output the result and exit
$np->nagios_exit( 
	 return_code => $np->check_threshold($result), 
	 message => " age of last station data = $result hr  " 
);

