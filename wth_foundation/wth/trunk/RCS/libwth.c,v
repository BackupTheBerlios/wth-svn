head	0.4;
access;
symbols;
locks
	jahns:0.4; strict;
comment	@ * @;


0.4
date	2001.09.14.15.38.56;	author jahns;	state Exp;
branches;
next	0.3;

0.3
date	2001.08.10.12.41.07;	author jahns;	state Exp;
branches;
next	;


desc
@wth library functions
@


0.4
log
@GPL'ed
@
text
@/* libwth.c

   $Id: libwth.c,v 0.3 2001/08/10 12:41:07 jahns Exp jahns $
   $Revision: 0.3 $

   Copyright (C) 2000-2001 Volker Jahns <Volker.Jahns@@thalreit.de>

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.
 
   
*/

#include "wth.h"


/* demasq
  
   dataframe correction: STX, ETX and ENQ are masqued in the
   raw frame sent by the weather station. 

   function demasq demasquerades these bytes
   
   before calculating the checksum the dataframe 
   has to corrected for masqueraded STX, ETX and ENQ:

	   <STX> is masqueraded in raw frame as <ENQ><DC2>
	   <ETX> is masqueraded in raw frame as <ENQ><DC3>
	   <ENQ> is masquerared in raw frame as <ENQ><NAK>

   don't know what happens if checksum equals STX, ETX or ENQ
   it should be masqueraded in the dataframe

*/


int demasq(unsigned char *data, int *mdat) {
    int i;
    int j;

    syslog(LOG_DEBUG, "demasq : length dataframe : %d\n", *mdat);

    /* process all data but first and last byte */
    for ( i = 1; i < *mdat - 2; i++ ) {
        if ( data[i] == ENQ && data[i+1] == DC2 ) {
            syslog(LOG_DEBUG, 
		   "demasq : STX found: i %d: data[i] %x: data[i+1] %x\n",
		   i, data[i], data [i+1]);
            data[i] = STX;
            for ( j = i+1; j < *mdat - 1; j++ ) data[j] = data[j + 1]; 
            *mdat -=1;
        }
        if ( data[i] == ENQ && data[i+1] == DC3 ) {
            syslog(LOG_DEBUG, 
		   "demasq : ETX found: i %d: data[i] %x: data[i+1] %x\n",
		   i, data[i], data [i+1]);
            data[i] = ETX;
            for ( j = i+1; j < *mdat - 1; j++ ) data[j] = data[j + 1]; 
            *mdat -= 1; 
        }
        if ( data[i] == ENQ && data[i+1] == NAK ) {
            syslog(LOG_DEBUG, 
		   "demasq : ENQ found: i %d: data[i] %x: data[i+1] %x\n",
		   i, data[i], data [i+1]);
            data[i] = ENQ;
            for ( j = i+1; j < *mdat - 1; j++ ) data[j] = data[j + 1]; 
            *mdat -= 1;
        }

    }
    syslog(LOG_DEBUG, "demasq : length dataframe after corr :%d\n", *mdat);
    return(0);
} 


/* chkframe

   dataframe format is

   <STX><length>[message]<checksum><ETX>
     1      1       n        1       1

   i.e. the data frame contains the data messsage + 2 start bytes + 2 end bytes
   message is also denoted as weatherstation response
	 
*/
int chkframe(unsigned char *data, int *mdat, struct cmd *pcmd) {
    int i;
    int chksum;
    int ldat;
    char *nakfram = "\x02\x01\x15\xe8\x03";

    ldat = *mdat;

    /* check fist byte is STX */
    if ( data[0]      == STX ) 
	  syslog(LOG_DEBUG, "chkframe : STX OK\n");
    else {
	  syslog(LOG_DEBUG, "chkframe : STX NOK\n");
	  werrno = ECHKSUM;
	  return(-1);
	}

    /* check last byte is ETX */
    if ( data[ldat-1] == ETX ) 
	  syslog(LOG_DEBUG, "chkframe : ETX OK\n");
    else {
	  syslog(LOG_DEBUG, "chkframe : ETX NOK\n");
	  return(-1);
	}

    /* check length of dataframe :

       mdat is number of elements in array data
       calculate length by function wstrlen and compare both integers
    */
    if ( wstrlen(data) == ldat ) 
	  syslog(LOG_DEBUG, "chkframe : frame length OK\n");
	else {
	  syslog(LOG_DEBUG, "chkframe : frame length NOK\n");
	  return(-1);
	}
	
    /* to calculate checksum demasquerade <STX, <ETX> and <ENQ> first */
    demasq(data, &ldat);

    /* calculate checksum */
    chksum = 0;
    for ( i = 0; i < ldat - 2; i++ ) {
	    chksum = chksum + data[i];
    }
    chksum = ( 256 - chksum ) & 0xff;
	if ( chksum == data[ldat - 2] )
	  syslog(LOG_DEBUG, "chkframe : checksum match OK\n");
	else {
	  syslog(LOG_DEBUG, "chkframe : checksum match NOK\n");
	  werrno = ECHKSUM;
	  return(-1);
	}


    /* check length of message 

       actual length of message is returned in data[1], 2nd byte of dataframe  
       expected length of message is defined in structure Ckey c 

	   as response length for command 1 can have 3 different values
	   depending on state of weatherstation c.clen serves as an upper bound
	   
    */        
    syslog(LOG_DEBUG, "chkframe : response length: %d\n", data[1]);
    syslog(LOG_DEBUG, "chkframe : expected length: %d\n",
		   c(pcmd->command)->id);

    if ( data[1] <= c(pcmd->command)->id )
	  syslog(LOG_DEBUG, "chkframe : response and expected length OK\n"); 
    else {
	  syslog(LOG_INFO, "chkframe : response and expected length NOK\n");
	  werrno = ECHKLEN;
	  return(-1);
	}
	
    /* check if NAK dataframe has been received */
    if ( !strcmp(data,nakfram) ) {
	  syslog(LOG_INFO, 
		 "chkframe : NAK received : faulty data reception\n");
	  werrno = ERCPT;
	  return(-1);
    }
    *mdat = ldat;
    return(0);
} 



/* getrd

   get raw data
*/
int getrd (unsigned char *data, int *mdat, struct cmd *pcmd) {
    int err;

    if ( pcmd->netflg == 0 ) /* read serial interface */ {
	  if ( ( err = getsrd(data, mdat, pcmd)) == -1)
		return(-1);
    }
    else if (pcmd->netflg == 1 ) /* read network interface */ {
	  if ( ( err = getnrd(data, mdat, pcmd)) == -1)
		return(-1);
    }
    return(0);
}



/* getcd

   get corrected data
*/
int getcd (unsigned char *data, int *mdat, struct cmd *pcmd) {
    int i;
    int err;

    /* read answer of weather station from serial port */
    if ( ( err = getrd(data, mdat, pcmd)) == -1)
	  return(-1);
    
    /* echo raw dataframe */
    err = echodata(data, *mdat);
    
    /* check data frame and do 
    	 data correction for masqueraded bytes */
    if ( ( err = chkframe(data, mdat, pcmd)) == -1)
	  return(-1);
    
    /* echo raw demasqueraded dataframe */
    err = echodata(data, *mdat);

    /* extract message: eliminiate first and last 2 bytes */
    for ( i = 0; i < *mdat - 4; i++ ) {
        data[i] = data[i+2];
    }
    *mdat = *mdat - 4;

    syslog(LOG_DEBUG, "getcd : Data length getcd : %d\n", *mdat);
    return(0);
}



/* wstat 

   return status of weather station
   commandword is 5

*/
char *
wstat(unsigned char *data, int mdat, struct wthio *rw ) {
    int i;
    char frame[255] = "";
    char sf[3] = "";
	char *t = "";
	static char *s;

    /* status of first 8 temperature/humidity sensors */
    for ( i = 0; i < 8; i++) {
        rw->sens[2*i].status   = data[i];
        rw->sens[2*i+1].status = data[i];
    }
    
    /* rain sensor */
    rw->sens[16].status  = data[8];
    /* wind sensor */
    rw->sens[17].status  = data[9];
    rw->sens[18].status  = data[9];
    /* indoor sensor : temp, hum, press */
    rw->sens[19].status  = data[10];
    rw->sens[20].status  = data[10];
    rw->sens[21].status  = data[10];
        
    /* status of temperature/humidity sensor 9 to 15 */
    for ( i = 11; i < 18; i++) {
	  rw->sens[2*i].status   = data[i];
	  rw->sens[2*i+1].status = data[i];
    }

	for ( i = 0; i < MAXSENSORS; i++ ) {
	  sprintf(sf, "%2d:",i);
      strcat(frame, sf);
    }
    syslog(LOG_DEBUG, "wstat : %s\n", frame);    
    strcpy(frame, "");

    for ( i = 0; i < MAXSENSORS; i++ ) {
	  sprintf(sf, "%2x:",rw->sens[i].status);
      strcat(frame, sf);
    }
    syslog(LOG_DEBUG, "wstat : %s\n", frame);   


	
	/* interval time */
    rw->wstat.itime = data[18];
	
    /* DCF status and synchronicity */
    rw->DCF.stat = getbits(data[19],0,1);
    rw->DCF.sync = getbits(data[19],3,1);

    /* number of sensors */
    if ( getbits(data[19],2,1) == 0 ) { 
        rw->wstat.nsens = 22;
    }
    else if ( getbits(data[19],2,1) == 1 ) {
        rw->wstat.nsens = 42;
    }
        
    /* version number */
    rw->wstat.version = data[20];

	/* syslog messages */
    syslog(LOG_DEBUG, "wstat : Intervall time [min] : %d\n", data[18]);
    syslog(LOG_DEBUG, "wstat : DCF Status   Bit 0 : %d\n",
		   getbits(data[19],0,1));
    syslog(LOG_DEBUG, "wstat : HF Status    Bit 1 : %d\n",
		   getbits(data[19],1,1));
    syslog(LOG_DEBUG, "wstat : 8/16 Sensor  Bit 2 : %d\n",
		   getbits(data[19],2,1));
    syslog(LOG_DEBUG, "wstat : DCF sync     Bit 3 : %d\n",
		   getbits(data[19],3,1));
    
    syslog(LOG_DEBUG, "wstat : bit 4  : %d\n", getbits(data[19],4,1));
    syslog(LOG_DEBUG, "wstat : bit 5  : %d\n", getbits(data[19],5,1));
    syslog(LOG_DEBUG, "wstat : bit 6 : %d\n", getbits(data[19],6,1));
    syslog(LOG_DEBUG, "wstat : bit 7 : %d\n", getbits(data[19],7,1));

    syslog(LOG_DEBUG, "wstat: DCF.stat : %d\n", rw->DCF.stat);
    syslog(LOG_DEBUG, "wstat: DCF.sync : %d\n", rw->DCF.sync);
    syslog(LOG_DEBUG, "wstat: number sensors : %d\n", rw->wstat.nsens);
    syslog(LOG_DEBUG, "wstat: version : %x\n", rw->wstat.version);

    /* fill return buffer */
    s = mkmsg(
	      "Status\nVersion number\t:\t%x\nInterval time\t:\t%d (min)\n",
	      rw->wstat.version, rw->wstat.itime);
    /*
      if ((t = malloc(size)) == NULL )
      return NULL;
      t = strdup("");
    */
    t = strdup(s);
	
    if ( rw->DCF.stat == 1 )
      s = mkmsg("DCF status\t:\t%d (DCF receiver present)\n", 
		rw->DCF.stat);
    else
      s = mkmsg("DCF status\t:\t%d (no DCF receiver found)\n", 
		rw->DCF.stat);
    strcat(t,s);
		
    if ( rw->DCF.sync == 1 )
      s = mkmsg("DCF sync.\t:\t%d (DCF synchronized)\n", rw->DCF.sync);
    else
      s = mkmsg("DCF sync.\t:\t%d (DCF NOT synchronized)\n", rw->DCF.sync);
      strcat(t,s);
      s = mkmsg("Sensor status\t:\t( %d sensors)\n", rw->wstat.nsens);
      strcat(t,s);
      for ( i = 0; i < rw->wstat.nsens; i++ ) {
	s = mkmsg("%2d|", i);
	strcat(t,s);
      }
      strcat(t,"\n");
      for ( i = 0; i < rw->wstat.nsens; i++ ) {
	s= mkmsg("%2x|", rw->sens[i].status);
	strcat(t,s);
      }
      strcat(t,"\n");    
      return (t);
}



/* dcftime 

   calculate time from weather station response to "poll DCF time"
   returns 
     seconds sinche EPOCH, if DCF is synchronized 
     -1, if DCF not synchronized.
   
*/
time_t dcftime(unsigned char *data, int ndat) {
    int err;
    int tmp1;
    int tmp2;   
	
    char *clk;

    struct tm t;
    time_t ltim, dtim;
	
	
    /* 1st byte : flag : B0-B2 : weeday; B4 : DCF ok */
    tmp1 = getbits(data[0], 2,3);
    tmp2 = getbits(data[0], 4,1);
    syslog(LOG_DEBUG, "dcftime : weekday %d; DCF ok : %d\n",tmp1, tmp2);

    t.tm_wday = tmp1;
    /* return -1 if DCF is not synchronized */
    if ( tmp2 == 0 ) 
	return(-1);

    /* 2nd byte : hour (BCD) : low nibble units, high nibble tens */
    tmp1 = getbits(data[1], 3,4);
    tmp2 = getbits(data[1], 7,4);
    syslog(LOG_DEBUG, "dcftime : hour : %d %d\n", tmp2, tmp1);

    t.tm_hour = tmp1 + 10*tmp2;

    /* 3rd byte : min (BCD) : low nibble units, high nibble tens */
    tmp1 = getbits(data[2], 3,4);
    tmp2 = getbits(data[2], 7,4);
    syslog(LOG_DEBUG, "dcftime : min : %d %d\n", tmp2, tmp1);

    t.tm_min = tmp1 + 10*tmp2;

    /* 4th byte : seconds : binary counter */
    t.tm_sec = data[3];
    syslog(LOG_DEBUG, "dcftime : Seconds : %d\n", data[3]);

    /* 5th byte : day (BCD) : low nibble units, high nibble tens */
    tmp1 = getbits(data[4], 3,4);
    tmp2 = getbits(data[4], 7,4);
    syslog(LOG_DEBUG, "dcftime : day : %d %d\n", tmp2, tmp1);

    t.tm_mday = tmp1 + 10*tmp2;

    /* 6th byte : month (BCD) : low nibble units, high nibble tens */
    tmp1 = getbits(data[5], 3,4);
    tmp2 = getbits(data[5], 7,4);
    syslog(LOG_DEBUG, "dcftime : month : %d %d\n", tmp2, tmp1);

    t.tm_mon = tmp1 + 10*tmp2 - 1;

    /* 7th byte : year (BCD) : low nibble units, high nibble tens */
    tmp1 = getbits(data[6], 3,4);
    tmp2 = getbits(data[6], 7,4);
    syslog(LOG_DEBUG, "dcftime : year : %d %d\n", tmp2, tmp1);

    t.tm_year = tmp1 + 10*tmp2 + 100;

	/* surprise, surprise */
    t.tm_isdst = -1;
	
	/* time conversion */
	tzset();

	err = time(&ltim);
    clk = ctime(&ltim);
    syslog(LOG_DEBUG, "dcftime : local clk : %s\n", clk);
    
    dtim = mktime(&t);
    clk = ctime(&dtim);
    syslog(LOG_DEBUG, "dcftime : dtim : %lu\n", dtim);
    syslog(LOG_DEBUG, "dcftime : DCF clk : %s\n", clk);

	
    return(dtim);
}

/* datex 

   data extraction
   stores the message datagram of the weather station to the structure sens

*/
int datex(unsigned char *data, int ndat, struct wthio *rw) {
    int i;
    int j;
    int err;
    int mbit;
    int nbit;
    int Hi, Lo;
    long age;
    time_t mtim;
    char *clk;
	
    syslog(LOG_DEBUG, "datex : ndat in datex : %d\n", ndat);

    /* block number */
    syslog(LOG_DEBUG, "datex : block NO (byte 1) : %d\n", data[0]);
    syslog(LOG_DEBUG, "datex : block NO (byte 2) : %d\n", data[1]);

    /* age of dataset is stored as minutes up to current time */
    syslog(LOG_DEBUG, "datex : age (byte 1) : %d\n", data[2]);
    syslog(LOG_DEBUG, "datex : age (byte 2) : %d\n", data[3]);
	age = ( data[2] & 0xff )  + ( data[3] << 8 & 0xff00 );


    /* time of dataset
	   if DCF synchronized use time delivered by weatherstation
	   if not, use localtime
    */
    if ( rw->DCF.time != -1 ) {
	  mtim = rw->DCF.time;
    }
    else { 
	  syslog(LOG_INFO,
             "datex : DCF not synchronized, using localtime for dataset\n");
	  err = time(&mtim);
	  syslog(LOG_DEBUG, 
             "datex : present time: %lu (seconds since EPOCH)\n", mtim);
    }
    
    /* dataset time is echoed in EPOCH seconds, dataset age in minutes
	   up to present time
    */
    mtim = ( mtim/60 - age) * 60;
    clk  = ctime(&mtim);

    syslog(LOG_DEBUG, "datex : rw->wstat.ndats : %lu; age[min] : %lu\n",
		   rw->wstat.ndats, age);
    syslog(LOG_DEBUG, "datex : measured at : %lu (seconds since EPOCH)\n",
		   mtim);
    syslog(LOG_DEBUG, "datex : measured at : %s\n", clk);
	
    /* get data of the first 8 temperature/humidity sensors */
    for ( i = 0; i < 8; i++) {
        j = i % 2;
        /* even i */
        if ( (i % 2) == 0 ) {
	    mbit=3; nbit=7;
	    j = (5*i - j)/2 + 4;
            /* temperature */
            if ( rw->sens[2*i].status != 0 ) {
		rw->sens[2*i].mess[rw->wstat.ndats].time   = mtim;
		rw->sens[2*i].mess[rw->wstat.ndats].value =  
		  10 * getbits(data[j+1], mbit-1, 3) + 
		       getbits(data[j], nbit, 4) +
		  0.1* getbits(data[j], mbit, 4);

		rw->sens[2*i].mess[rw->wstat.ndats].sign   = 
		  getbits(data[j+1], mbit, 1);
	    }

            /* humidity 
               the value is calculated from an 8bit Byte which is formed
               by two Nibbles    
            */
            if ( rw->sens[2*i+1].status != 0 ) {
		Lo = getbits(data[j+1], nbit, 4);
		Hi = getbits(data[j+2], mbit-1, 3) << 4;
		rw->sens[2*i+1].mess[rw->wstat.ndats].time  = mtim;
		rw->sens[2*i+1].mess[rw->wstat.ndats].value = Hi + Lo;
		/* Bit 3 of Hi Nibble is new flag */
		rw->sens[2*i+1].mess[rw->wstat.ndats].sign  = 
		  getbits(data[j+2], mbit, 1);
	    }

        } /* odd i */ else if ( (i % 2) == 1) {
	    mbit=7; nbit=3;
	    j = (5*i - j)/2 + 4;

            /* temperature */
            if ( rw->sens[2*i].status != 0 ) {
		rw->sens[2*i].mess[rw->wstat.ndats].time   = mtim;
		
		rw->sens[2*i].mess[rw->wstat.ndats].value =
		  10  * getbits(data[j+1], mbit-1, 3) +
		        getbits(data[j+1], nbit, 4) +
		  0.1 * getbits(data[j], mbit, 4);

		rw->sens[2*i].mess[rw->wstat.ndats].sign    = 
		  getbits(data[j+1], mbit, 1);
	    }
            /* humidity 
               the value is calculated from an 8bit Byte which is formed
               by two Nibbles    
            */
            if ( rw->sens[2*i+1].status != 0 ) {
		Lo = getbits(data[j+2], nbit, 4);
		Hi = getbits(data[j+2], mbit-1, 3) << 4;

		rw->sens[2*i+1].mess[rw->wstat.ndats].time   = mtim;
		rw->sens[2*i+1].mess[rw->wstat.ndats].value  = Hi + Lo;
		/* Bit 3 of Hi Nibble is new flag */
		rw->sens[2*i+1].mess[rw->wstat.ndats].sign   = 
		  getbits(data[j+2], mbit, 1);
	    }
	}
    }


    /* rain sensor */
    Hi = getbits(data[25], 6, 7) << 8 ;
    Lo = getbits(data[24], 7, 8);
    /* digitize((Lo + (Hi << 8 & 0x0f00 )), &tdigit, &hdigit, &tendigit, &udigit); */

    rw->sens[16].mess[rw->wstat.ndats].time      = mtim;
    rw->sens[16].mess[rw->wstat.ndats].value     = Hi + Lo;
    rw->sens[16].mess[rw->wstat.ndats].sign      = getbits(data[25], 7, 1);
        

    /* wind speed */
    rw->sens[17].mess[rw->wstat.ndats].time   = mtim;
    rw->sens[17].mess[rw->wstat.ndats].sign   = 0;
    rw->sens[17].mess[rw->wstat.ndats].value = 
      100 * getbits(data[27], 6, 3) +
      10  * getbits(data[27], 3, 4) +
            getbits(data[26], 6, 3) +
      0.1 * getbits(data[26], 3, 4);

    /* wind direction */
    rw->sens[18].mess[rw->wstat.ndats].time     = mtim;
    rw->sens[18].mess[rw->wstat.ndats].sign     = 0;
    /* sens[18].mess[rw->wstat.ndats].hundreds = getbits(data[29], 3, 4); */
    /* hmm is this a violation of the protocol specification ? */
    rw->sens[18].mess[rw->wstat.ndats].value =
      100 * ( data[29] & 0x03) +
      10  * getbits(data[28], 7, 4) +
      getbits(data[28], 3, 4);

    /* indoor pressure */
    rw->sens[19].mess[rw->wstat.ndats].time     = mtim;
    rw->sens[19].mess[rw->wstat.ndats].sign     = 0;
    rw->sens[19].mess[rw->wstat.ndats].value = 
      100 *  getbits(data[30], 7, 4) +
      10  *  getbits(data[30], 3, 4) +
      getbits(data[29], 7, 4);

    /* indoor temperature */
    rw->sens[20].mess[rw->wstat.ndats].time     = mtim;
    rw->sens[20].mess[rw->wstat.ndats].sign     = 0;
    rw->sens[20].mess[rw->wstat.ndats].value    = 
      10  * getbits(data[32], 3, 4) + 
      getbits(data[31], 7, 4) +
      0.1 * getbits(data[31], 7, 4);

    /* indoor humidity */
    Lo = getbits(data[32], 7, 4);
    Hi = getbits(data[33], 2, 3) << 4;
    rw->sens[21].mess[rw->wstat.ndats].time     = mtim;
    rw->sens[21].mess[rw->wstat.ndats].sign     = 0;
    rw->sens[21].mess[rw->wstat.ndats].value    = Hi + Lo;
	
    return(0);
};


/* pdata 

   print the sensor data as hold in structure sens

*/
char *
pdata(struct sensor sens[], int snum) {
  int i,j;         /* array indices of sensor and setno */
  int size = 100;
  char *t = "";
  char *s;

  s = mkmsg("Sensor\tType\tStatus\tdataset\ttime\t\tsign\tabs.value\n");
  /* code won't work on LINUX, FreeBSD OK
	 size = strlen(s) + 1; 
   	 if ((t = malloc(size)) == NULL )
		return NULL;
	 strcat(t,s);
  */
  t = strdup(s);
  
  for ( i = 0; i < MAXSENSORS; i++ ) {
    if ( sens[i].status != 0 ) {   
      for ( j = 0; j < snum; j++) {
		s = mkmsg("%d\t%s\t%d\t%d\t%lu\t%d\t%8.1f\n", i, 
				  sens[i].type, sens[i].status, j, 
                                  sens[i].mess[j].time,
                                  sens[i].mess[j].sign,
                                  sens[i].mess[j].value);
		size = size + strlen(s) + 1;
		if ((t = realloc(t,size)) == NULL )
		  return NULL;
		strcat(t,s);
      }
    }
  }
  return (t);
}


/* wcmd

   function fills the datastructure rw

*/
char *
wcmd (struct cmd *pcmd, struct wthio *rw) {
  int ndat = 0;                   /* length of array containing the 
                                     data frame */
  int err;                        /* return value of functions, 
                                     useful for errorhandling */
  int retval = 0;                 
  long snum = 0;                   /* current dataset number */
  int command;
  int argcm;


  unsigned char data[MAXBUFF];    /* data array to store the raw dataframe 
                                     and the message datagram */
  char *clk;                      /* display time in reasonable format */
  char *rbuf ="";                 /* return buffer */
  

  syslog(LOG_DEBUG, "wcmd: called for command request: %d\n",pcmd->command);  
  rw->wstat.ndats = 0;
  command = pcmd->command; 
  argcm   = pcmd->argcmd; 

  /* first get status of weatherstation 
     needed to fill sens.status
  */
  pcmd->command = 5;
  if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
	rbuf = mkmsg("wcmd: error data reception\n");
	return (rbuf);
  }
  pcmd->command = command;
  syslog(LOG_DEBUG, "wcmd : check status OK\n");

  /* status weatherstation */
  if ( ( rbuf = wstat(data, ndat, rw)) == NULL) {
	rbuf = mkmsg("wcmd: error in subroutine wstat\n");
	return (rbuf);
  }
  
  /* command 0 : poll DCF time */
  if (command == 0) {
	  tzset();
	
      /* write command and retrieve data */
	  if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
		rbuf = mkmsg("wcmd: error data reception\n");
		return (rbuf);
	  }

      /* calculate seconds since EPOCH if DCF synchronized */
      rw->DCF.time  = dcftime(data, ndat);
      if (rw->DCF.time == -1) 
		rbuf = mkmsg("DCF not synchronized\n");
      else {
		clk = ctime(&rw->DCF.time);
		rbuf = mkmsg("%s", clk);
      }
  }

  /* command 1 : Request Dataset */
  else if (command == 1)  {

      /* first get DCF time if possible */
      pcmd->command = 0;
	  if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
		rbuf = mkmsg("wcmd: error data reception\n");
		return (rbuf);
	  }
	  pcmd->command = command;

      /* calculate seconds since EPOCH if DCF synchronized */
      rw->DCF.time  = dcftime(data, ndat);

      /* write command and retrieve data */
      if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
		rbuf = mkmsg("wcmd: error data reception\n");
		return (rbuf);
	  }

      /* weather station response : no data available: <DLE> */
      if ( ( ndat == 1 ) && ( data[0] == DLE ) ) {
		rbuf = mkmsg("no data available (<DLE> received)\n");
      }
      /* fill data structure sens */
      else {
		/* get one dataset */
		err = datex(data, ndat, rw);
		syslog(LOG_DEBUG, "wcmd : returncode datex : %d\n", err);
		rw->wstat.ndats = rw->wstat.ndats + 1;
		snum++;
      }

      /* echo sensor data */
	  if ( rw->wstat.ndats > 0 )
		rbuf = pdata(rw->sens, rw->wstat.ndats);
	 
  } 


  /* command 2 : Select next dataset */
  else if (command == 2) {
      /* write the command word to the weather station */ 
      /* extract message datagram */
      if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
		rbuf = mkmsg("wcmd: error data reception\n");
		return (rbuf);
	  }


      /* if DLE no data available */
      if ( ( ndat == 1 ) && ( data[0] == DLE ) ) {
		rbuf = mkmsg("no data available(<DLE> received)\n");
        retval = 16; 
      } else if ( ( ndat == 1 ) && ( data[0] == ACK ) ) /* if ACK next dataset is available */ {
		rbuf = mkmsg("next dataset available (<ACK> received)\n");
        retval = 6;
      }
      /* exit if unknown response */
      else {
		rbuf = mkmsg("error next dataset : \"unknown response\"\n");
        retval = -1;
      }
  }


  /* command 3 : Activate 8 temperature sensors */
  else if (command == 3) {

      /* write the command word to the weather station */ 
      /* extract message datagram */
      if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
		rbuf = mkmsg("wcmd: error data reception\n");
		return (rbuf);
	  }

      /* weather station response : <ACK> */
      if ( ( ndat == 1 ) && ( data[0] == ACK ) ) {
		rbuf = mkmsg("set 9 temperature sensors (<ACK> received)\n");
      }

	  /* update status */
	  pcmd->command = 5;
	  if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
		rbuf = mkmsg("wcmd: error data reception\n");
		return (rbuf);
	  }
	  if ( ( wstat(data, ndat, rw)) == NULL) {
		rbuf = mkmsg("wcmd: error in subroutine wstat\n");
		return (rbuf);
	  }	  
  } 


  /* command 4 : Activate 16 temperature sensors */
  else if (command == 4) {

      /* write the command word to the weather station */ 
      /* extract message datagram */
      if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
		rbuf = mkmsg("wcmd: error data reception\n");
		return (rbuf);
	  }

      /* weather station response : <ACK> */
      if ( ( ndat == 1 ) && ( data[0] == ACK ) ) {
		rbuf = mkmsg("set 16 temperature sensors(<ACK> received)\n");
      }

	  /* update status */
	  pcmd->command = 5;
	  if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
		rbuf = mkmsg("wcmd: error data reception\n");
		return (rbuf);
	  }
	  if ( ( wstat(data, ndat, rw)) == NULL) {
		rbuf = mkmsg("wcmd: error in subroutine wstat\n");
		return (rbuf);
	  }	  
  } 


  /* command 5 : Request status of weatherstation */
  else if ( command == 5 ) {
	; /* status known, drive thru */
  } 


  /* command 6 : Set logging intervall of weatherstation */
  else if (command == 6) {
      /* write the command word to the weather station */ 
      /* extract message datagram */
      if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
		rbuf = mkmsg("wcmd: error data reception\n");
		return (rbuf);
	  }

      /* weather station response : <ACK> */
      if ( ( ndat == 1 ) && ( data[0] == ACK ) ) {
	rbuf = mkmsg("set logging interval to %d [min] (<ACK> received)\n",
		     pcmd->argcmd);
      }

      /* update status */
      pcmd->command = 5;
      if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
	rbuf = mkmsg("wcmd: error data reception\n");
	return (rbuf);
      }
      if ( ( wstat(data, ndat, rw)) == NULL) {
	rbuf = mkmsg("wcmd: error in subroutine wstat\n");
	return (rbuf);
      }
  } 


  /* command 12 : 
      Recursively, request dataset and select next dataset, 
      recursive combination of command 1 and 2 
  */
  else if (command == 12) {      
      /* first get DCF time if possible */
      pcmd->command = 0;
      if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
		rbuf = mkmsg("wcmd: error data reception\n");
		return (rbuf);
	  }
      pcmd->command = command;

      /* calculate seconds since EPOCH if DCF synchronized */
      rw->DCF.time  = dcftime(data, ndat);

	  
      while (retval != 16) {
		  /* write command and retrieve data */
		  pcmd->command = 1;
		  if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
			rbuf = mkmsg("wcmd: error data reception\n");
			return (rbuf);
		  }

		  /* extract dataset from raw dataframe */
		  /* weather station response : no data available: <DLE> */
		  if ( ( ndat == 1 ) && ( data[0] == DLE ) ) {
			rbuf = mkmsg("no data available (<DLE> received)\n");
			retval = 16;
		  }
		  /* do extraction */
		  else {
			if ( ( err = datex(data, ndat, rw)) == -1) {
				rbuf = mkmsg("wcmd: error extracting data frame");
				return (rbuf);
			}
			rw->wstat.ndats = rw->wstat.ndats + 1;
		  }
 
		  /* write the command word to select next dataset and 
		     retrieve response*/ 
		  pcmd->command = 2;
		  if ( ( err = getcd( data, &ndat, pcmd)) == -1) {
			rbuf = mkmsg("wcmd: error data reception\n");
			return (rbuf);
		  }

		  /* stop if DLE no data available, */
		  if ( ( ndat == 1 ) && ( data[0] == DLE ) ) {
		    /* rbuf = mkmsg(
		       "<DLE> received :\"no data available\"!"); */
		    retval = 16; 
		  }
		  /* if ACK next dataset is available */
		  else if ( ( ndat == 1 ) && ( data[0] == ACK ) ) {
			syslog(LOG_DEBUG, \
                  "wcmd: next dataset available (<ACK> received)!\n");
			retval = 6;
		  }
		  /* return if unknown response */
		  /* no data is returned, maybe too strict? */
		  else {
		    rbuf = mkmsg(
		      "wcmd: error request next dataset : unknown response\n");
		    return (rbuf);
		  }
          syslog(LOG_DEBUG, "wcmd: retval : %d\n", retval);
      }

      /* echo sensor data */
	  if ( rw->wstat.ndats > 0 )
		rbuf = pdata(rw->sens, rw->wstat.ndats);
  } else {
      rbuf = mkmsg("unknown command\n");
  }
  syslog(LOG_DEBUG, "wcmd: exit OK\n");
  return(rbuf);

}



/* initdata 

   presets the datastructures
     rw->sens
	 pcmd

*/
int initdata(struct wthio *rw) {
  int i;  /* array subscription */  

  /* set type of the sensors */
  /* first 8 temperature/humidity sensors */
  for ( i = 0; i < 8; i++) {
      rw->sens[2*i].type   = "temp";
      rw->sens[2*i+1].type = "hum";
  }
  
  /* rain sensor */
  rw->sens[16].type  = "rain";
  /* wind sensor */
  rw->sens[17].type  = "wspd";
  rw->sens[18].type  = "wdir";
  /* indoor sensor : temp, hum, press */
  rw->sens[19].type  = "pres";
  rw->sens[20].type  = "temp";
  rw->sens[21].type  = "hum";
  /* sensor 9 is combined temperature/humidity */
  rw->sens[22].type  = "temp";
  rw->sens[23].type  = "hum";
      
  /* status of pressure/temperature/humidity sensor 10 to 15 */
  for ( i = 0; i < 18; i = i + 3) {
      rw->sens[24 + i    ].type   = "pres";
      rw->sens[24 + i + 1].type = "temp";
      rw->sens[24 + i + 2].type = "hum";
  }
  return(0);
}


/* initcmd

   presets the datastructures
	 pcmd

*/
int initcmd(struct cmd *pcmd) {  
  /* initialize struct pcmd */
  pcmd->argcmd      = 0;
  pcmd->timeout     = TIMEOUT;
  pcmd->baudrate    = BAUDRATE;
  pcmd->logfacility = LOGFACILITY;
  pcmd->device      = SER_DEVICE;
  pcmd->verbose     = 0;
  pcmd->netflg      = -1;
  pcmd->hostname    = "localhost"; 
  pcmd->port        = WPORT; 
  pcmd->tnport      = TNPORT;   
  return(0);
}
@


0.3
log
@final stuff
@
text
@d3 1
a3 1
   $Id: libwth.c,v 0.3 2001/08/10 12:38:46 jahns Exp jahns $
d5 17
@
