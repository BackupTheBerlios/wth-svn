head	1.4;
access;
symbols;
locks
	jahns:1.4; strict;
comment	@ * @;


1.4
date	2001.11.22.08.50.47;	author jahns;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.21.15.36.33;	author jahns;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.16.10.46.01;	author jahns;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.16.06.47.39;	author jahns;	state Exp;
branches;
next	;


desc
@@


1.4
log
@minimum cmdline parsing added
@
text
@/* pcwsr.c

   serial line communication w/ PC weathersensor receiver

   $Id: pcwsr.c,v 1.3 2001/11/21 15:36:33 jahns Exp jahns $
   $Revision: 1.3 $

   Copyright (C) 2001 Volker Jahns <Volker.Jahns@@thalreit.de>

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.
 
*/

#include <termios.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <time.h>
#include <string.h>

#define SDEVICE "/dev/ttyS0"
#define BAUDRATE B19200
#define MAXBUFF 1024
#define TIMEOUT 200
#define FRAMELEN 8
#define DEBUG 1



/*  initserial

  opens serial port for communication
  serial port settings:
     19200, 8, odd parity,  2stop

*/
static int 
initserial (struct termios *newtio, struct termios *oldtio, char *sdevice ) {
  int pfd;

  /* open the device to be non-blocking (read will return immediatly) */
  if ( ( pfd = open( sdevice, O_RDWR| O_NOCTTY| O_NDELAY| O_NONBLOCK)) == -1 ) {
    perror("Unable to open serial device");
    exit(-1);
  } 
  
  /* Make the file descriptor asynchronous (the manual page says only 
     O_APPEND and O_NONBLOCK, will work with F_SETFL...) */
  fcntl(pfd, F_SETFL, FASYNC); 
  
  /* save current port settings */
  tcgetattr(pfd,oldtio);
  
  /* prefill port settings */
  tcgetattr(pfd,newtio);

  /* set communication link parameters */
  cfsetispeed(newtio, BAUDRATE);  
  cfsetospeed(newtio, BAUDRATE);	

  
  newtio->c_cflag |= PARENB;
  newtio->c_cflag |= PARODD;
  newtio->c_cflag |= CLOCAL;
  newtio->c_cflag |= CREAD;
  newtio->c_cflag |= CS8;
  newtio->c_cflag |= CSTOPB;
  newtio->c_cflag |= CSIZE; 
  
  newtio->c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);
  newtio->c_oflag &= ~OPOST;

  newtio->c_cc[VMIN]=1;
  newtio->c_cc[VTIME]=5;

  tcsetattr(pfd,TCSANOW,newtio);

  return(pfd);
}


/*
   closeserial

   restore the old port settings
   close port

*/
static int closeserial( int fd, struct termios *oldtio) {

    /* restore old port settings */
    tcsetattr(fd,TCSANOW,oldtio);
	
    /* close serial port */
    close(fd);
    return(0);
}



char
*sname(int snum)
{
  static char *name[] = {
    "outdoor", "outdoor", 
    "rain", "wind", 
    "indoor", "brightness", 
    "radiation power", "undef"
  };
  return ( snum < 0 || snum >6 ) ? name[7] : name[snum];
}





/*  
   get raw data from serial interface
*/
int 
main( int argc, char *argv[]) {
    int c, i, fd, err;              /* filedescriptor serial port */
    int hi, lo, dummy;
    int mask = 0x7f;
    int shift = 0x7;
    int styp, saddr, sver;       /* sensor typ, address and version */
    float t, wspd, wdev;
    int h, p, wdir, r, b, rad, mul;
    int debug, raw;

    struct termios newtio,oldtio; /* termios structures to set comm parameters */
    unsigned char data[MAXBUFF];
    char clk[MAXBUFF];
    char buf[MAXBUFF];
    char *name;  /* sensor typ spec */

    time_t mtime;
    struct tm *ctm;



    printf("pcwsr 0.1 - experimental test version\n");
    debug = 0;
    raw   = 0;

    while ( --argc > 0 && (*++argv)[0] == '-')
      while ( c = *++argv[0] )
	switch (c) {
	case 'r':
	  raw = 1;
          printf("option: raw\n");
	  break;
	case 'd':
	  debug= 1;
          printf("option: debug\n");
	  break;
	default:
	  printf("Illegal option: %c\n", c);
	  argc = 0;
	  break;
	}

    if (argc !=1 ) {
      printf("Usage: pcwsr -r -d <serial device>\n");
      printf("\twhere <options> include:\n");
      printf("\t-r:\tdump raw data frames\n");
      printf("\t-d:\taddtl. debug output\n");
      exit(-1);
    }

  
    printf("%s\n", *argv);

    tzset();                                   /* setting timezone */
    fd = initserial(&newtio, &oldtio, *argv); /* serial initialization */ 

    for ( ;; ) {
      /* read weather station resonse from serial port */
      err = read(fd, data, FRAMELEN);

      time(&mtime);
      ctm = gmtime(&mtime);
      strftime(clk, sizeof(clk), "%a %b %d %Y %X", ctm);

      if (raw) {
	printf("%s : %d bytes read |", clk, err);
	for ( i = 0; i<8; i++) {
	  printf("%x|", data[i]);
	}
	printf("\n");
      }

      /* figure sensor type and address */
      dummy = data[1] & mask;
      styp  = dummy & 0xf0;
      styp  = styp >> 4;
      saddr = dummy & 0xf;
      name = sname(styp);

      sver = 0x12;
      if ( ( styp < 0x5 ) && ( saddr < 0x8)) {
	  sver = 0x11;
      }

      if (debug) {
	printf("dummy :%x, styp :%x, saddr:%x\n", dummy, styp, saddr);      
	printf("sname: %s, styp  :%x, sver :%x\n", name, styp, sver);
      }

      /* handle sensors */
      /* outdoor (temperature only) */
      if ( styp == 0x0 ) {
	/* temperature */
	hi = data[2] & mask ;
        hi = hi << shift;
	lo = data[3] & mask;
	t  = ( hi + lo ) / 10.0 ;

	if (debug) {
	  printf("Temperature\n");
	  printf("W1: %x, W2: %x\n", data[2], data[3]);
	  printf("hi : %x, lo: %x, Temp: %.1f\n\n", hi, lo, t);
	}
        
        if (!raw) {
          snprintf(buf, sizeof(buf),
            "%s | %8s (address 0x0%x) | T[°C] %.1f\n",
	    clk, name, saddr, t);
        }
      }
      /* outdoor (temperature, humidity) */
      else if ( styp == 0x1 ) {
	/* temperature */
	hi = data[2] & mask ;
        hi = hi << shift;
	lo = data[3] & mask;
	t  = ( hi + lo ) / 10.0 ;

	/* humidity */
	h = data[4] & mask;

	if (debug) {
	  printf("Temperature\n");
	  printf("W1: %x, W2: %x\n", data[2], data[3]);
	  printf("hi : %x, lo: %x, Temp: %.1f\n\n", hi, lo, t);
	  printf("Humidity\n");
	  printf("W3: %x\n", data[4]);
	  printf("Hum: %d\n\n", h);
	}

        if (!raw) {
          snprintf(buf, sizeof(buf),
            "%s | %8s (version %x at address 0x0%x) | T[°C] %.1f | H[%% rel.hum] %d\n",
	    clk, name, sver, saddr, t, h);
        }
      } 
      /* rain */
      else if ( styp == 0x2 ) {
	hi = data[2] & 0x1f ;
        hi = hi << shift;
	lo = data[3] & mask;
	r  = hi + lo ;

	if (debug) {
	  printf("Rain\n");
	  printf("W1: %x, W2: %x\n", data[2], data[3]);
	  printf("hi : %x, lo: %x, Rain: %d\n\n", hi, lo, r);
	}

        if (!raw) {
          snprintf(buf, sizeof(buf),
            "%s | %8s (version %x at address 0x0%x) | [Impulses] %d\n",
	    clk, name, sver, saddr, r);
        }
      } 
      /* wind */
      else if ( styp == 0x3 ) {
	/* wind speed*/
	hi = data[2] & mask ;
        hi = hi << shift;
	lo = data[3] & mask;
	wspd  = ( hi + lo ) / 10.0 ;

	/* wind deviation */
	dummy = data[4] & mask;
        wdev  = (dummy * 45 );
        wdev  = 0.5 * wdev;

	/* wind direction */
	hi = data[5] & mask ;
        hi = hi << shift;
	lo = data[6] & mask;
	wdir = hi + lo ;

	if (debug) {
	  printf("Windspeed\n");
	  printf("W1: %x, W2: %x\n", data[2], data[3]);
	  printf("hi : %x, lo: %x, Windspd: %.1f\n\n", hi, lo, wspd);
	  printf("Wind Deviation\n");
	  printf("W3: %x\n", data[4]);
	  printf("Wind deviation: %f\n\n", wdev);
	  printf("Wind Direction\n");
	  printf("W4: %x, W5: %x\n", data[5], data[6]);
	  printf("Wind direction: %d\n\n", wdir);
	}

        if (!raw) {
          snprintf(buf, sizeof(buf),
            "%s | %8s (version %x at address 0x0%x) | Speed[km/s] %.1f | Direction [°] %d +/- %.1f\n",
	    clk, name, sver, saddr, wspd, wdir, wdev);
        }
      } 
      /* indoor (temperature, humidity, pressure) */
      else if ( styp == 0x4) {  
	/* temperature */
	hi = data[2] & mask;
        hi = hi << shift;
	lo = data[3] & mask;
	t  = ( hi + lo ) / 10.0 ;

	/* humidity */
	h = data[4] & mask;

	/* pressure */
	dummy  = data[5] & mask;
	hi = dummy << shift;
	lo = data[6] & mask;
	p  = hi + lo;

        if (debug) {
	  printf("Temperature\n");
	  printf("W1: %x, W2: %x\n", data[2], data[3]);
	  printf("hi : %x, lo: %x, Temp: %.1f\n\n", hi, lo, t);
	  printf("Humidity\n");
	  printf("W3: %x\n", data[4]);
	  printf("Hum: %d\n\n", h);
	  printf("Pressure\n");
	  printf("W4: %x, W5: %x\n", data[5], data[6]);
	  printf("dummy: %x, hi : %x, lo: %x, Press: %d\n", dummy, hi, lo, p);
	}

        if (!raw) {
          snprintf(buf, sizeof(buf),
            "%s | %8s (version %x at address 0x0%x) | T[°C] %.1f | H[%% rel.hum] %d | P[hPa] %d\n",
	    clk, name, sver, saddr, t, h, p);
        }
      }
      /* brightness */
      else if ( styp == 0x5) {  
	/* brightness */
	hi = data[2] & mask;
        hi = hi << shift;
	lo = data[3] & mask;
	b  = hi + lo ;

	/* multiplicator */
	mul = data[4] & 0x3;

        if (debug) {
	  printf("Brightness\n");
	  printf("W1: %x, W2: %x\n", data[2], data[3]);
	  printf("hi : %x, lo: %x, brightness: %d\n\n", hi, lo, b);
	  printf("Multiplicator\n");
	  printf("W3: %x\n", data[4]);
          printf("mul: %d\n", mul);
	}

        if (!raw) {
          snprintf(buf, sizeof(buf),
            "%s | %8s (version %x at address 0x0%x) | [arb.units] %d x %d\n",
	    clk, name, sver, saddr, b, mul);
        }
      }
      /* pyranometer */
      else if ( styp == 0x6) {  
	/* pyranometer */
	hi = data[2] & mask;
        hi = hi << shift;
	lo = data[3] & mask;
	rad  = hi + lo;

	/* multiplicator */
	mul = data[4] & 0x3;

        if (debug) {
	  printf("Pyranometer\n");
	  printf("W1: %x, W2: %x\n", data[2], data[3]);
	  printf("hi : %x, lo: %x, Radiation Power: %d\n\n", hi, lo, rad);
	  printf("Multiplicator\n");
	  printf("W3: %x\n", data[4]);
	  printf("mul: %d\n\n", h);
	}

        if (!raw) {
          snprintf(buf, sizeof(buf),
            "%s | %8s (version %x at address 0x0%x) | Radiation Power[arb.unit] %d x %d\n",
	    clk, name, sver, saddr, rad, mul);
        }
      }
      /* sensor unknown ?! */
      else {

	snprintf(buf, sizeof(buf), "%s | unknown sensor type ( possible version %x at address 0x0%x): Please report incident to: Volker.Jahns@@thalreit.de\n",
		clk, sver, saddr);
      }
      if (!raw) printf("%s\n", buf);
    }
    /* leave serial line in good state */ 
    closeserial(fd, &oldtio); 
    return(0);
}









@


1.3
log
@handling all sensors (untested!)
raw /debug output
@
text
@d5 2
a6 2
   $Id: pcwsr.c,v 1.1 2001/11/21 15:26:16 jahns Exp jahns $
   $Revision: 1.1 $
d134 2
a135 2
main( int argc, char **argv) {
    int i, fd, err;              /* filedescriptor serial port */
d157 1
a157 1
    raw   = 1;
d159 19
a177 2
    if (argc < 2) {
      printf("Usage: $0 <serial device> <options>\n");
d179 2
a180 1
      printf("\traw: dump raw data frames\n");
d184 2
a185 1
    if ( argv[2] == "raw" ) raw = 1;
d188 1
a188 1
    fd = initserial(&newtio, &oldtio, argv[1]); /* serial initialization */ 
@


1.2
log
@- 1st working version
- handles only 3 types of sensors
- reading data needs to be worked on
@
text
@d5 1
a5 1
   $Id: pcwsr.c,v 1.1 2001/11/16 06:47:39 jahns Exp jahns $
d32 1
d35 1
a35 1
#define BAUDRATE 19200
d51 1
a51 1
initserial (struct termios *newtio, struct termios *oldtio ) {
d55 4
a58 1
  pfd = open(SDEVICE, O_RDWR| O_NOCTTY| O_NDELAY| O_NONBLOCK ); 
a70 1
  
d84 1
d120 2
a121 2
    "indoor", "Helligkeit", 
    "Pyranometer", "undef"
a125 62
/*
  readdata

  reading data from serial port

*/
static int 
readdata (int rfd)
{
  int err, i, n;
  int maxfd;
  int loop = 1;
  fd_set readfs;
  unsigned char *rbuf;
  struct timeval tv;
  
  err = -1;
  maxfd = rfd +1;

  
  for ( i = 0; i < 254; i++ ){
      rbuf[i] = 0;
  }

  /* loop until input is available */
  while ( loop) {
        
        FD_ZERO(&readfs);
        FD_SET(rfd, &readfs);

        tv.tv_sec  = TIMEOUT;
        /* tv.tv_usec = 0; */
        
        n = select(maxfd, &readfs, NULL, NULL, &tv);
        switch (n) {
        case -1:
          perror("select");
          return(-1);
        case 0:
          printf("select\t\t: Timeout\n");
          return(-1);
        default:
          
          /* loop until err = 0 */
          while ( ( rbuf[err-1] != 3) && ( err != 8)) {
                err = read(rfd, rbuf, MAXBUFF);
                perror("read returned");
                printf("read\t\t: errno: %d\n", errno);

                printf("read\t\t: err %d: rbuf: |", err);
                for ( i = 0; i < err; i++) {
                  printf("%d|", rbuf[i]);
                }
                printf("\n");
                loop=0;
          }
          break;
        }
  }
  return(0);
}

d134 1
a134 1
main (int argc, char **argv) {
d140 3
a142 3
    float t;
    int h, p;
    int debug;
d147 2
a148 1
    char *name;
d153 3
a155 2
    tzset();                           /* setting timezone */
    fd = initserial(&newtio, &oldtio); /* serial initialization */ 
d157 10
d168 4
a171 1
    for ( ;;) {
a172 1
      /*  err = readdata(fd);*/
d174 1
d177 1
a177 1
      strftime(clk, sizeof(clk), "%c", ctm);
d179 2
a180 2
      if (debug) {
	printf("%s : err: %d  |", clk, err);
d204 1
a204 1
      /* handle different type of sensors */
a216 3
	  printf("Humidity\n");
	  printf("W3: %x\n", data[4]);
	  printf("Hum: %d\n\n", h);
d218 6
a223 3

        printf("%s | %8s at addr %x | T[°C] %.1f\n",
	       clk, name, saddr, t);
d245 18
a262 2
        printf("%s | %8s at addr %x | T[°C] %.1f | H[%% rel.hum] %d\n",	
	       clk, name, saddr, t, h);
d264 42
d336 60
a395 2
        printf("%s | %8s at addr %x | T[°C] %.1f | H[%% rel.hum] %d| P[hPa] %d\n",
	       clk, name, saddr, t, h, p);
d397 2
d400 1
@


1.1
log
@Initial revision
@
text
@d5 2
a6 2
   $Id$
   $Revision$
d38 3
d110 12
d194 1
a194 1
    int hi, lo, t;
d197 4
a200 1
    float val;
d202 1
a202 2
    struct termios newtio,oldtio;   /* termios structures to set 
                                     comm parameters */
d205 1
d210 3
a212 4
    tzset(); /* setting timezone */
    /* serial initialization */
    fd = initserial(&newtio, &oldtio);
    
d221 24
a244 3
      printf("%s : err: %d  |", clk, err);
      for ( i = 0; i<8; i++) {
	printf("%x|", data[i]);
a245 1
      printf("\n");
d247 17
a263 22
      /* temperature */
      printf("Temperature\n");
      printf("W1: %x, W2: %x\n", data[2], data[3]);
      hi = data[2] & mask << shift;
      lo = data[3] & mask;
      val = ( hi + lo ) / 10.0 ;
      printf("hi : %x, lo: %x, val: %.1f\n\n", hi, lo, val);

      /* humidity */
      printf("Humidity\n");
      printf("W3: %x\n", data[4]);
      lo = data[4] & mask;
      printf("lo: %d\n\n", lo);

      /* pressure */
      printf("Pressure\n");
      printf("W4: %x, W5: %x\n", data[5], data[6]);
      t  = data[5] & mask;
      hi = t << shift;
      lo = data[6] & mask;
      val = hi + lo;
      printf("t: %x, hi : %x, lo: %x, val: %.1f\n", t, hi, lo, val);
d265 60
@
